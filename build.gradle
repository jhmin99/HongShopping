plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'jihong99'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.11"
}

// jacoco report 설정
jacocoTestReport {

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [

			])
		}))
	}

	reports {
		// html로 report 생성하기
		// 빌드경로/jacoco/report.html 폴더 내부로 경로 설정
		html.destination file("$buildDir/jacoco/report.html")
	}

	// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
	finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 커버리지 적용 여부
			element = 'CLASS' // 커버리지 적용 단위

			excludes = [
			]

			/**
			 * Instructions (C0 Coverage)
			 * The smallest unit JaCoCo counts are single Java byte code instructions.
			 * Instruction coverage provides information about the amount of code that has been executed or missed.
			 * This metric is completely independent from source formatting and always available,
			 * even in absence of debug information in the class files.
			 */
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}

			/**
			 * Branches (C1 Coverage)
			 * JaCoCo also calculates branch coverage for all if and switch statements.
			 * This metric counts the total number of such branches in a method and determines the number of executed or missed branches.
			 * Branch coverage is always available, even in absence of debug information in the class files.
			 * Note that exception handling is not considered as branches in the context of this counter definition.
			 *
			 * If the class files haven been compiled with debug information decision points can be mapped to source lines and highlighted accordingly:
			 *
			 * No coverage: No branches in the line has been executed (red diamond)
			 * Partial coverage: Only a part of the branches in the line have been executed (yellow diamond)
			 * Full coverage: All branches in the line have been executed (green diamond)
			 */

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}

		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // report is always generated after tests run
}
