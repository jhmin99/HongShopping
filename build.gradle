
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'jihong99'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.11"
}

// Jacoco report configuration
jacocoTestReport {

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/ShoppingmallApplication.*',
					'**/entity/base/BaseEntity.*',
					'**/entity/enums/*',
					'**/constants/*',
					'**/config/*',
					'**/utils/JsonUtils.*'
			])
		}))
	}

	reports {
		// Generate report in HTML format
		// Set the destination path to build/jacoco/report.html
		html.destination file("$buildDir/jacoco/report.html")
	}

	// Execute jacocoTestCoverageVerification after jacocoTestReport
	finalizedBy 'jacocoTestCoverageVerification'
}

// Jacoco coverage verification configuration
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // Apply coverage checking
			element = 'CLASS' // Apply coverage at class level

			excludes = [
					'**/ShoppingmallApplication.*',
					'**/entity/base/BaseEntity.*',
					'**/entity/enums/*',
					'**/constants/*',
					'**/config/*',
					'**/utils/JsonUtils.*'
			]

			/**
			 * Instructions (C0 Coverage)
			 * Instruction coverage provides information about the amount of code that has been executed or missed.
			 * This metric is completely independent from source formatting and always available,
			 * even in absence of debug information in the class files.
			 */
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}

			/**
			 * Branches (C1 Coverage)
			 * Branch coverage counts the total number of branches in a method and determines the number of executed or missed branches.
			 * Branch coverage is always available, even in absence of debug information in the class files.
			 */
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.7'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // Generate report after tests run
}
